// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2017 14:05:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_vlg_sample_tst(
	clk,
	rst,
	start,
	sampler_tx
);
input  clk;
input  rst;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cpu_vlg_check_tst (
	a,
	a0,
	a1,
	a2,
	a3,
	a4,
	b,
	b0,
	b1,
	b2,
	b3,
	b4,
	c,
	c0,
	c1,
	c2,
	c3,
	c4,
	d,
	d0,
	d1,
	d2,
	d3,
	d4,
	e,
	e0,
	e1,
	e2,
	e3,
	e4,
	f,
	f0,
	f1,
	f2,
	f3,
	f4,
	g,
	g0,
	g1,
	g2,
	g3,
	g4,
	opcode_teste,
	output,
	sampler_rx
);
input  a;
input  a0;
input  a1;
input  a2;
input  a3;
input  a4;
input  b;
input  b0;
input  b1;
input  b2;
input  b3;
input  b4;
input  c;
input  c0;
input  c1;
input  c2;
input  c3;
input  c4;
input  d;
input  d0;
input  d1;
input  d2;
input  d3;
input  d4;
input  e;
input  e0;
input  e1;
input  e2;
input  e3;
input  e4;
input  f;
input  f0;
input  f1;
input  f2;
input  f3;
input  f4;
input  g;
input  g0;
input  g1;
input  g2;
input  g3;
input  g4;
input [3:0] opcode_teste;
input [3:0] output;
input sampler_rx;

reg  a_expected;
reg  a0_expected;
reg  a1_expected;
reg  a2_expected;
reg  a3_expected;
reg  a4_expected;
reg  b_expected;
reg  b0_expected;
reg  b1_expected;
reg  b2_expected;
reg  b3_expected;
reg  b4_expected;
reg  c_expected;
reg  c0_expected;
reg  c1_expected;
reg  c2_expected;
reg  c3_expected;
reg  c4_expected;
reg  d_expected;
reg  d0_expected;
reg  d1_expected;
reg  d2_expected;
reg  d3_expected;
reg  d4_expected;
reg  e_expected;
reg  e0_expected;
reg  e1_expected;
reg  e2_expected;
reg  e3_expected;
reg  e4_expected;
reg  f_expected;
reg  f0_expected;
reg  f1_expected;
reg  f2_expected;
reg  f3_expected;
reg  f4_expected;
reg  g_expected;
reg  g0_expected;
reg  g1_expected;
reg  g2_expected;
reg  g3_expected;
reg  g4_expected;
reg [3:0] opcode_teste_expected;
reg [3:0] output_expected;

reg  a_prev;
reg  a0_prev;
reg  a1_prev;
reg  a2_prev;
reg  a3_prev;
reg  a4_prev;
reg  b_prev;
reg  b0_prev;
reg  b1_prev;
reg  b2_prev;
reg  b3_prev;
reg  b4_prev;
reg  c_prev;
reg  c0_prev;
reg  c1_prev;
reg  c2_prev;
reg  c3_prev;
reg  c4_prev;
reg  d_prev;
reg  d0_prev;
reg  d1_prev;
reg  d2_prev;
reg  d3_prev;
reg  d4_prev;
reg  e_prev;
reg  e0_prev;
reg  e1_prev;
reg  e2_prev;
reg  e3_prev;
reg  e4_prev;
reg  f_prev;
reg  f0_prev;
reg  f1_prev;
reg  f2_prev;
reg  f3_prev;
reg  f4_prev;
reg  g_prev;
reg  g0_prev;
reg  g1_prev;
reg  g2_prev;
reg  g3_prev;
reg  g4_prev;
reg [3:0] opcode_teste_prev;
reg [3:0] output_prev;

reg  a_expected_prev;
reg  a0_expected_prev;
reg  a1_expected_prev;
reg  a2_expected_prev;
reg  a3_expected_prev;
reg  a4_expected_prev;
reg  b_expected_prev;
reg  b0_expected_prev;
reg  b1_expected_prev;
reg  b2_expected_prev;
reg  b3_expected_prev;
reg  b4_expected_prev;
reg  c_expected_prev;
reg  c0_expected_prev;
reg  c1_expected_prev;
reg  c2_expected_prev;
reg  c3_expected_prev;
reg  c4_expected_prev;
reg  d_expected_prev;
reg  d0_expected_prev;
reg  d1_expected_prev;
reg  d2_expected_prev;
reg  d3_expected_prev;
reg  d4_expected_prev;
reg  e_expected_prev;
reg  e0_expected_prev;
reg  e1_expected_prev;
reg  e2_expected_prev;
reg  e3_expected_prev;
reg  e4_expected_prev;
reg  f_expected_prev;
reg  f0_expected_prev;
reg  f1_expected_prev;
reg  f2_expected_prev;
reg  f3_expected_prev;
reg  f4_expected_prev;
reg  g_expected_prev;
reg  g0_expected_prev;
reg  g1_expected_prev;
reg  g2_expected_prev;
reg  g3_expected_prev;
reg  g4_expected_prev;
reg [3:0] opcode_teste_expected_prev;
reg [3:0] output_expected_prev;

reg  last_a_exp;
reg  last_a0_exp;
reg  last_a1_exp;
reg  last_a2_exp;
reg  last_a3_exp;
reg  last_a4_exp;
reg  last_b_exp;
reg  last_b0_exp;
reg  last_b1_exp;
reg  last_b2_exp;
reg  last_b3_exp;
reg  last_b4_exp;
reg  last_c_exp;
reg  last_c0_exp;
reg  last_c1_exp;
reg  last_c2_exp;
reg  last_c3_exp;
reg  last_c4_exp;
reg  last_d_exp;
reg  last_d0_exp;
reg  last_d1_exp;
reg  last_d2_exp;
reg  last_d3_exp;
reg  last_d4_exp;
reg  last_e_exp;
reg  last_e0_exp;
reg  last_e1_exp;
reg  last_e2_exp;
reg  last_e3_exp;
reg  last_e4_exp;
reg  last_f_exp;
reg  last_f0_exp;
reg  last_f1_exp;
reg  last_f2_exp;
reg  last_f3_exp;
reg  last_f4_exp;
reg  last_g_exp;
reg  last_g0_exp;
reg  last_g1_exp;
reg  last_g2_exp;
reg  last_g3_exp;
reg  last_g4_exp;
reg [3:0] last_opcode_teste_exp;
reg [3:0] last_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:44] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 44'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	a0_prev = a0;
	a1_prev = a1;
	a2_prev = a2;
	a3_prev = a3;
	a4_prev = a4;
	b_prev = b;
	b0_prev = b0;
	b1_prev = b1;
	b2_prev = b2;
	b3_prev = b3;
	b4_prev = b4;
	c_prev = c;
	c0_prev = c0;
	c1_prev = c1;
	c2_prev = c2;
	c3_prev = c3;
	c4_prev = c4;
	d_prev = d;
	d0_prev = d0;
	d1_prev = d1;
	d2_prev = d2;
	d3_prev = d3;
	d4_prev = d4;
	e_prev = e;
	e0_prev = e0;
	e1_prev = e1;
	e2_prev = e2;
	e3_prev = e3;
	e4_prev = e4;
	f_prev = f;
	f0_prev = f0;
	f1_prev = f1;
	f2_prev = f2;
	f3_prev = f3;
	f4_prev = f4;
	g_prev = g;
	g0_prev = g0;
	g1_prev = g1;
	g2_prev = g2;
	g3_prev = g3;
	g4_prev = g4;
	opcode_teste_prev = opcode_teste;
	output_prev = output;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	a0_expected_prev = a0_expected;
	a1_expected_prev = a1_expected;
	a2_expected_prev = a2_expected;
	a3_expected_prev = a3_expected;
	a4_expected_prev = a4_expected;
	b_expected_prev = b_expected;
	b0_expected_prev = b0_expected;
	b1_expected_prev = b1_expected;
	b2_expected_prev = b2_expected;
	b3_expected_prev = b3_expected;
	b4_expected_prev = b4_expected;
	c_expected_prev = c_expected;
	c0_expected_prev = c0_expected;
	c1_expected_prev = c1_expected;
	c2_expected_prev = c2_expected;
	c3_expected_prev = c3_expected;
	c4_expected_prev = c4_expected;
	d_expected_prev = d_expected;
	d0_expected_prev = d0_expected;
	d1_expected_prev = d1_expected;
	d2_expected_prev = d2_expected;
	d3_expected_prev = d3_expected;
	d4_expected_prev = d4_expected;
	e_expected_prev = e_expected;
	e0_expected_prev = e0_expected;
	e1_expected_prev = e1_expected;
	e2_expected_prev = e2_expected;
	e3_expected_prev = e3_expected;
	e4_expected_prev = e4_expected;
	f_expected_prev = f_expected;
	f0_expected_prev = f0_expected;
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
	f3_expected_prev = f3_expected;
	f4_expected_prev = f4_expected;
	g_expected_prev = g_expected;
	g0_expected_prev = g0_expected;
	g1_expected_prev = g1_expected;
	g2_expected_prev = g2_expected;
	g3_expected_prev = g3_expected;
	g4_expected_prev = g4_expected;
	opcode_teste_expected_prev = opcode_teste_expected;
	output_expected_prev = output_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 
// expected opcode_teste[ 3 ]
initial
begin
	opcode_teste_expected[3] = 1'bX;
end 
// expected opcode_teste[ 2 ]
initial
begin
	opcode_teste_expected[2] = 1'bX;
end 
// expected opcode_teste[ 1 ]
initial
begin
	opcode_teste_expected[1] = 1'bX;
end 
// expected opcode_teste[ 0 ]
initial
begin
	opcode_teste_expected[0] = 1'bX;
end 
// expected \output [ 3 ]
initial
begin
	output_expected[3] = 1'bX;
end 
// expected \output [ 2 ]
initial
begin
	output_expected[2] = 1'bX;
end 
// expected \output [ 1 ]
initial
begin
	output_expected[1] = 1'bX;
end 
// expected \output [ 0 ]
initial
begin
	output_expected[0] = 1'bX;
end 

// expected a1
initial
begin
	a1_expected = 1'bX;
end 

// expected a2
initial
begin
	a2_expected = 1'bX;
end 

// expected a3
initial
begin
	a3_expected = 1'bX;
end 

// expected a4
initial
begin
	a4_expected = 1'bX;
end 

// expected b1
initial
begin
	b1_expected = 1'bX;
end 

// expected b2
initial
begin
	b2_expected = 1'bX;
end 

// expected b3
initial
begin
	b3_expected = 1'bX;
end 

// expected b4
initial
begin
	b4_expected = 1'bX;
end 

// expected c1
initial
begin
	c1_expected = 1'bX;
end 

// expected c2
initial
begin
	c2_expected = 1'bX;
end 

// expected c3
initial
begin
	c3_expected = 1'bX;
end 

// expected c4
initial
begin
	c4_expected = 1'bX;
end 

// expected d1
initial
begin
	d1_expected = 1'bX;
end 

// expected d2
initial
begin
	d2_expected = 1'bX;
end 

// expected d3
initial
begin
	d3_expected = 1'bX;
end 

// expected d4
initial
begin
	d4_expected = 1'bX;
end 

// expected e1
initial
begin
	e1_expected = 1'bX;
end 

// expected e2
initial
begin
	e2_expected = 1'bX;
end 

// expected e3
initial
begin
	e3_expected = 1'bX;
end 

// expected e4
initial
begin
	e4_expected = 1'bX;
end 

// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 

// expected f3
initial
begin
	f3_expected = 1'bX;
end 

// expected f4
initial
begin
	f4_expected = 1'bX;
end 

// expected g1
initial
begin
	g1_expected = 1'bX;
end 

// expected g2
initial
begin
	g2_expected = 1'bX;
end 

// expected g3
initial
begin
	g3_expected = 1'bX;
end 

// expected g4
initial
begin
	g4_expected = 1'bX;
end 

// expected a0
initial
begin
	a0_expected = 1'bX;
end 

// expected b0
initial
begin
	b0_expected = 1'bX;
end 

// expected c0
initial
begin
	c0_expected = 1'bX;
end 

// expected d0
initial
begin
	d0_expected = 1'bX;
end 

// expected e0
initial
begin
	e0_expected = 1'bX;
end 

// expected f0
initial
begin
	f0_expected = 1'bX;
end 

// expected g0
initial
begin
	g0_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or a0_expected or a0 or a1_expected or a1 or a2_expected or a2 or a3_expected or a3 or a4_expected or a4 or b_expected or b or b0_expected or b0 or b1_expected or b1 or b2_expected or b2 or b3_expected or b3 or b4_expected or b4 or c_expected or c or c0_expected or c0 or c1_expected or c1 or c2_expected or c2 or c3_expected or c3 or c4_expected or c4 or d_expected or d or d0_expected or d0 or d1_expected or d1 or d2_expected or d2 or d3_expected or d3 or d4_expected or d4 or e_expected or e or e0_expected or e0 or e1_expected or e1 or e2_expected or e2 or e3_expected or e3 or e4_expected or e4 or f_expected or f or f0_expected or f0 or f1_expected or f1 or f2_expected or f2 or f3_expected or f3 or f4_expected or f4 or g_expected or g or g0_expected or g0 or g1_expected or g1 or g2_expected or g2 or g3_expected or g3 or g4_expected or g4 or opcode_teste_expected or opcode_teste or output_expected or output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected a0 = %b | expected a1 = %b | expected a2 = %b | expected a3 = %b | expected a4 = %b | expected b = %b | expected b0 = %b | expected b1 = %b | expected b2 = %b | expected b3 = %b | expected b4 = %b | expected c = %b | expected c0 = %b | expected c1 = %b | expected c2 = %b | expected c3 = %b | expected c4 = %b | expected d = %b | expected d0 = %b | expected d1 = %b | expected d2 = %b | expected d3 = %b | expected d4 = %b | expected e = %b | expected e0 = %b | expected e1 = %b | expected e2 = %b | expected e3 = %b | expected e4 = %b | expected f = %b | expected f0 = %b | expected f1 = %b | expected f2 = %b | expected f3 = %b | expected f4 = %b | expected g = %b | expected g0 = %b | expected g1 = %b | expected g2 = %b | expected g3 = %b | expected g4 = %b | expected opcode_teste = %b | expected output = %b | ",a_expected_prev,a0_expected_prev,a1_expected_prev,a2_expected_prev,a3_expected_prev,a4_expected_prev,b_expected_prev,b0_expected_prev,b1_expected_prev,b2_expected_prev,b3_expected_prev,b4_expected_prev,c_expected_prev,c0_expected_prev,c1_expected_prev,c2_expected_prev,c3_expected_prev,c4_expected_prev,d_expected_prev,d0_expected_prev,d1_expected_prev,d2_expected_prev,d3_expected_prev,d4_expected_prev,e_expected_prev,e0_expected_prev,e1_expected_prev,e2_expected_prev,e3_expected_prev,e4_expected_prev,f_expected_prev,f0_expected_prev,f1_expected_prev,f2_expected_prev,f3_expected_prev,f4_expected_prev,g_expected_prev,g0_expected_prev,g1_expected_prev,g2_expected_prev,g3_expected_prev,g4_expected_prev,opcode_teste_expected_prev,output_expected_prev);
	$display("| real a = %b | real a0 = %b | real a1 = %b | real a2 = %b | real a3 = %b | real a4 = %b | real b = %b | real b0 = %b | real b1 = %b | real b2 = %b | real b3 = %b | real b4 = %b | real c = %b | real c0 = %b | real c1 = %b | real c2 = %b | real c3 = %b | real c4 = %b | real d = %b | real d0 = %b | real d1 = %b | real d2 = %b | real d3 = %b | real d4 = %b | real e = %b | real e0 = %b | real e1 = %b | real e2 = %b | real e3 = %b | real e4 = %b | real f = %b | real f0 = %b | real f1 = %b | real f2 = %b | real f3 = %b | real f4 = %b | real g = %b | real g0 = %b | real g1 = %b | real g2 = %b | real g3 = %b | real g4 = %b | real opcode_teste = %b | real output = %b | ",a_prev,a0_prev,a1_prev,a2_prev,a3_prev,a4_prev,b_prev,b0_prev,b1_prev,b2_prev,b3_prev,b4_prev,c_prev,c0_prev,c1_prev,c2_prev,c3_prev,c4_prev,d_prev,d0_prev,d1_prev,d2_prev,d3_prev,d4_prev,e_prev,e0_prev,e1_prev,e2_prev,e3_prev,e4_prev,f_prev,f0_prev,f1_prev,f2_prev,f3_prev,f4_prev,g_prev,g0_prev,g1_prev,g2_prev,g3_prev,g4_prev,opcode_teste_prev,output_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( a0_expected_prev !== 1'bx ) && ( a0_prev !== a0_expected_prev )
		&& ((a0_expected_prev !== last_a0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a0_expected_prev);
		$display ("     Real value = %b", a0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a0_exp = a0_expected_prev;
	end
	if (
		( a1_expected_prev !== 1'bx ) && ( a1_prev !== a1_expected_prev )
		&& ((a1_expected_prev !== last_a1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_expected_prev);
		$display ("     Real value = %b", a1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a1_exp = a1_expected_prev;
	end
	if (
		( a2_expected_prev !== 1'bx ) && ( a2_prev !== a2_expected_prev )
		&& ((a2_expected_prev !== last_a2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_expected_prev);
		$display ("     Real value = %b", a2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_a2_exp = a2_expected_prev;
	end
	if (
		( a3_expected_prev !== 1'bx ) && ( a3_prev !== a3_expected_prev )
		&& ((a3_expected_prev !== last_a3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a3_expected_prev);
		$display ("     Real value = %b", a3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_a3_exp = a3_expected_prev;
	end
	if (
		( a4_expected_prev !== 1'bx ) && ( a4_prev !== a4_expected_prev )
		&& ((a4_expected_prev !== last_a4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a4_expected_prev);
		$display ("     Real value = %b", a4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_a4_exp = a4_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( b0_expected_prev !== 1'bx ) && ( b0_prev !== b0_expected_prev )
		&& ((b0_expected_prev !== last_b0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b0_expected_prev);
		$display ("     Real value = %b", b0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_b0_exp = b0_expected_prev;
	end
	if (
		( b1_expected_prev !== 1'bx ) && ( b1_prev !== b1_expected_prev )
		&& ((b1_expected_prev !== last_b1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_expected_prev);
		$display ("     Real value = %b", b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_b1_exp = b1_expected_prev;
	end
	if (
		( b2_expected_prev !== 1'bx ) && ( b2_prev !== b2_expected_prev )
		&& ((b2_expected_prev !== last_b2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b2_expected_prev);
		$display ("     Real value = %b", b2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_b2_exp = b2_expected_prev;
	end
	if (
		( b3_expected_prev !== 1'bx ) && ( b3_prev !== b3_expected_prev )
		&& ((b3_expected_prev !== last_b3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b3_expected_prev);
		$display ("     Real value = %b", b3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_b3_exp = b3_expected_prev;
	end
	if (
		( b4_expected_prev !== 1'bx ) && ( b4_prev !== b4_expected_prev )
		&& ((b4_expected_prev !== last_b4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b4_expected_prev);
		$display ("     Real value = %b", b4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_b4_exp = b4_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( c1_expected_prev !== 1'bx ) && ( c1_prev !== c1_expected_prev )
		&& ((c1_expected_prev !== last_c1_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c1_expected_prev);
		$display ("     Real value = %b", c1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_c1_exp = c1_expected_prev;
	end
	if (
		( c2_expected_prev !== 1'bx ) && ( c2_prev !== c2_expected_prev )
		&& ((c2_expected_prev !== last_c2_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c2_expected_prev);
		$display ("     Real value = %b", c2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_c2_exp = c2_expected_prev;
	end
	if (
		( c3_expected_prev !== 1'bx ) && ( c3_prev !== c3_expected_prev )
		&& ((c3_expected_prev !== last_c3_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c3_expected_prev);
		$display ("     Real value = %b", c3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_c3_exp = c3_expected_prev;
	end
	if (
		( c4_expected_prev !== 1'bx ) && ( c4_prev !== c4_expected_prev )
		&& ((c4_expected_prev !== last_c4_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c4_expected_prev);
		$display ("     Real value = %b", c4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_c4_exp = c4_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( d0_expected_prev !== 1'bx ) && ( d0_prev !== d0_expected_prev )
		&& ((d0_expected_prev !== last_d0_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d0_expected_prev);
		$display ("     Real value = %b", d0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_d0_exp = d0_expected_prev;
	end
	if (
		( d1_expected_prev !== 1'bx ) && ( d1_prev !== d1_expected_prev )
		&& ((d1_expected_prev !== last_d1_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_d1_exp = d1_expected_prev;
	end
	if (
		( d2_expected_prev !== 1'bx ) && ( d2_prev !== d2_expected_prev )
		&& ((d2_expected_prev !== last_d2_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_d2_exp = d2_expected_prev;
	end
	if (
		( d3_expected_prev !== 1'bx ) && ( d3_prev !== d3_expected_prev )
		&& ((d3_expected_prev !== last_d3_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_d3_exp = d3_expected_prev;
	end
	if (
		( d4_expected_prev !== 1'bx ) && ( d4_prev !== d4_expected_prev )
		&& ((d4_expected_prev !== last_d4_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_d4_exp = d4_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( e0_expected_prev !== 1'bx ) && ( e0_prev !== e0_expected_prev )
		&& ((e0_expected_prev !== last_e0_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e0_expected_prev);
		$display ("     Real value = %b", e0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_e0_exp = e0_expected_prev;
	end
	if (
		( e1_expected_prev !== 1'bx ) && ( e1_prev !== e1_expected_prev )
		&& ((e1_expected_prev !== last_e1_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e1_expected_prev);
		$display ("     Real value = %b", e1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_e1_exp = e1_expected_prev;
	end
	if (
		( e2_expected_prev !== 1'bx ) && ( e2_prev !== e2_expected_prev )
		&& ((e2_expected_prev !== last_e2_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e2_expected_prev);
		$display ("     Real value = %b", e2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_e2_exp = e2_expected_prev;
	end
	if (
		( e3_expected_prev !== 1'bx ) && ( e3_prev !== e3_expected_prev )
		&& ((e3_expected_prev !== last_e3_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e3_expected_prev);
		$display ("     Real value = %b", e3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_e3_exp = e3_expected_prev;
	end
	if (
		( e4_expected_prev !== 1'bx ) && ( e4_prev !== e4_expected_prev )
		&& ((e4_expected_prev !== last_e4_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e4_expected_prev);
		$display ("     Real value = %b", e4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_e4_exp = e4_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( f0_expected_prev !== 1'bx ) && ( f0_prev !== f0_expected_prev )
		&& ((f0_expected_prev !== last_f0_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f0_expected_prev);
		$display ("     Real value = %b", f0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_f0_exp = f0_expected_prev;
	end
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end
	if (
		( f3_expected_prev !== 1'bx ) && ( f3_prev !== f3_expected_prev )
		&& ((f3_expected_prev !== last_f3_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f3_expected_prev);
		$display ("     Real value = %b", f3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_f3_exp = f3_expected_prev;
	end
	if (
		( f4_expected_prev !== 1'bx ) && ( f4_prev !== f4_expected_prev )
		&& ((f4_expected_prev !== last_f4_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f4_expected_prev);
		$display ("     Real value = %b", f4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_f4_exp = f4_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( g0_expected_prev !== 1'bx ) && ( g0_prev !== g0_expected_prev )
		&& ((g0_expected_prev !== last_g0_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g0_expected_prev);
		$display ("     Real value = %b", g0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_g0_exp = g0_expected_prev;
	end
	if (
		( g1_expected_prev !== 1'bx ) && ( g1_prev !== g1_expected_prev )
		&& ((g1_expected_prev !== last_g1_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g1_expected_prev);
		$display ("     Real value = %b", g1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_g1_exp = g1_expected_prev;
	end
	if (
		( g2_expected_prev !== 1'bx ) && ( g2_prev !== g2_expected_prev )
		&& ((g2_expected_prev !== last_g2_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g2_expected_prev);
		$display ("     Real value = %b", g2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_g2_exp = g2_expected_prev;
	end
	if (
		( g3_expected_prev !== 1'bx ) && ( g3_prev !== g3_expected_prev )
		&& ((g3_expected_prev !== last_g3_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g3_expected_prev);
		$display ("     Real value = %b", g3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_g3_exp = g3_expected_prev;
	end
	if (
		( g4_expected_prev !== 1'bx ) && ( g4_prev !== g4_expected_prev )
		&& ((g4_expected_prev !== last_g4_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g4_expected_prev);
		$display ("     Real value = %b", g4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_g4_exp = g4_expected_prev;
	end
	if (
		( opcode_teste_expected_prev[0] !== 1'bx ) && ( opcode_teste_prev[0] !== opcode_teste_expected_prev[0] )
		&& ((opcode_teste_expected_prev[0] !== last_opcode_teste_exp[0]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_teste_expected_prev);
		$display ("     Real value = %b", opcode_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_opcode_teste_exp[0] = opcode_teste_expected_prev[0];
	end
	if (
		( opcode_teste_expected_prev[1] !== 1'bx ) && ( opcode_teste_prev[1] !== opcode_teste_expected_prev[1] )
		&& ((opcode_teste_expected_prev[1] !== last_opcode_teste_exp[1]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_teste_expected_prev);
		$display ("     Real value = %b", opcode_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_opcode_teste_exp[1] = opcode_teste_expected_prev[1];
	end
	if (
		( opcode_teste_expected_prev[2] !== 1'bx ) && ( opcode_teste_prev[2] !== opcode_teste_expected_prev[2] )
		&& ((opcode_teste_expected_prev[2] !== last_opcode_teste_exp[2]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_teste_expected_prev);
		$display ("     Real value = %b", opcode_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_opcode_teste_exp[2] = opcode_teste_expected_prev[2];
	end
	if (
		( opcode_teste_expected_prev[3] !== 1'bx ) && ( opcode_teste_prev[3] !== opcode_teste_expected_prev[3] )
		&& ((opcode_teste_expected_prev[3] !== last_opcode_teste_exp[3]) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_teste_expected_prev);
		$display ("     Real value = %b", opcode_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_opcode_teste_exp[3] = opcode_teste_expected_prev[3];
	end
	if (
		( output_expected_prev[0] !== 1'bx ) && ( output_prev[0] !== output_expected_prev[0] )
		&& ((output_expected_prev[0] !== last_output_exp[0]) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_output_exp[0] = output_expected_prev[0];
	end
	if (
		( output_expected_prev[1] !== 1'bx ) && ( output_prev[1] !== output_expected_prev[1] )
		&& ((output_expected_prev[1] !== last_output_exp[1]) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_output_exp[1] = output_expected_prev[1];
	end
	if (
		( output_expected_prev[2] !== 1'bx ) && ( output_prev[2] !== output_expected_prev[2] )
		&& ((output_expected_prev[2] !== last_output_exp[2]) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_output_exp[2] = output_expected_prev[2];
	end
	if (
		( output_expected_prev[3] !== 1'bx ) && ( output_prev[3] !== output_expected_prev[3] )
		&& ((output_expected_prev[3] !== last_output_exp[3]) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_output_exp[3] = output_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg start;
// wires                                               
wire a;
wire a0;
wire a1;
wire a2;
wire a3;
wire a4;
wire b;
wire b0;
wire b1;
wire b2;
wire b3;
wire b4;
wire c;
wire c0;
wire c1;
wire c2;
wire c3;
wire c4;
wire d;
wire d0;
wire d1;
wire d2;
wire d3;
wire d4;
wire e;
wire e0;
wire e1;
wire e2;
wire e3;
wire e4;
wire f;
wire f0;
wire f1;
wire f2;
wire f3;
wire f4;
wire g;
wire g0;
wire g1;
wire g2;
wire g3;
wire g4;
wire [3:0] opcode_teste;
wire [3:0] output;

wire sampler;                             

// assign statements (if any)                          
cpu i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b(b),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.c(c),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.clk(clk),
	.d(d),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.e(e),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.f(f),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.g(g),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.opcode_teste(opcode_teste),
	.\output (output),
	.rst(rst),
	.start(start)
);

// clk
initial
begin
	repeat(62)
	begin
		clk = 1'b0;
		clk = #8000 1'b1;
		# 8000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #20000 1'b0;
end 

cpu_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.start(start),
	.sampler_tx(sampler)
);

cpu_vlg_check_tst tb_out(
	.a(a),
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.b(b),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.c(c),
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.c4(c4),
	.d(d),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.e(e),
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.f(f),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.g(g),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.opcode_teste(opcode_teste),
	.output(output),
	.sampler_rx(sampler)
);
endmodule

